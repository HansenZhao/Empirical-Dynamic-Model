classdef EDM
    
    properties
        seriesData;
    end
    
    properties(Access = private)
        count;
        d;                       %attactor dimension
    end
    
    methods
        function obj = EDM(data)           
            [row,col] = size(data);
            if(col > row)
                data = data';
            end
            obj.seriesData = data;
            [obj.count,obj.d] = size(data);  % rows for time series,colom for each observation
        end
        
        % Space State Reconstruction data set by single lag
        function set = SSRset(obj,e,tau)
            new_length = obj.count-(e-1)*tau;
            set = zeros(new_length,e,obj.d);  
            for m = 1:1:e
                set(:,m,:) = obj.seriesData(1+(e-m)*tau:obj.count + (1-m)*tau,:);
            end           
        end        
        % matrix time lagged single observation need to be estimate matrix
        function X = estimateValue(obj,table,index)
            X=0;
            [length,~] = size(table);
            for m = 1:1:length
                X = X + table(m,2) * obj.seriesData(table(m,1),index);
            end
        end
        
        function result = estimateFromTo(obj,indexRes,indexTar,e,tau)
            locSSRset = SSRset(obj,e,tau);
            resMat = locSSRset(:,:,indexRes);
            result = zeros(obj.count,2);
            result(:,1) = obj.seriesData(:,indexTar);
            %for m = (1+(e-1)*tau):1:obj.count
            for m = 2:1:(obj.count-(e-1)*tau)
                table = EDM.getNearestIndices(resMat,m);
%                 scatter(resMat(:,1),resMat(:,2));
%                 hold on;
%                 scatter(resMat(table(:,1),1),resMat(table(:,1),2));
%                 hold off;
%                 pause(2);
                result(m,2) = obj.estimateValue(table,indexTar);
            end
            scatter(result(:,1),result(:,2));
        end
    end
    
    methods(Static)   
        % matrix time lagged single observation matrix
        function table = getNearestIndices(matrix,index)
            [rows,e] = size(matrix);
            Mat = zeros(rows,e+2); % index|x|...|n|distance
            Mat(:,1) = 1:1:rows;
            Mat(:,2:e+1) = matrix;
            for m = 1:1:rows
                Mat(m,e+2) = pdist([matrix(m,:);matrix(index,:)]);
            end
            newMat = sortrows(Mat,e+2); %Mat before sort | new Mat sorted
            table = zeros(e+1,2);   % index|weight
            table(:,1) = newMat(2:e+2,1);
            vecU = zeros(e+1,1);      %ui for each point
            for m = 1:1:e+1
                vecU(m) = exp(- newMat(m+1,e+2) / Mat(1,e+2));
            end
            s = sum(vecU);
            for m = 1:1:e+1
                table(m,2) = vecU(m)/s;
            end
        end      
    end
    
end
